/*Нека е дадена класата Complex со кодовите презентирани подолу (дефиниција на класа, дефиниција на функции цхленки и драјвер за класатa Complex).
 * Оваа класа овозможува операции со комплексни броеви. Тоа се броеви од облик realenDel + imaginarenDel * i, каде i има вредност √1

а) да се модифицира класата така да овозможи влез и излез на комплексни броеви преку преклопување на операторите << и >>. Ова треба да ја замени
функцијата print() од класата, која во вашето решение не треба да постои.
б) да се преклопи оператор за множење кој ќе овозможи множење на: два комплексни броја, комплексен со цел број и цел број со комплексен број.
в) да се преклопат операорите == и != кои ќе овозможат споредување на два комплексни броја.
г) да се преклопат операторите +=, -= и *= со помош на ваќе направените функции за преклопување на +, - и *.
*/
// p08_06.cpp
// Drajver za klasata Complex
#include <iostream>

using namespace std;

#include "Complex.h"

int main() {
    Complex x, y(4.3, 8.2), z(3.3, 1.1);

    cout << "Vnesi realen i imaginaren del: ";
    cin >> x;

    cout << "x: " << x << endl;
    cout << "y: " << y << endl;
    cout << "z: " << z << endl;

    x = y + z;
    cout << "\nx = y + z:\n" << x << " = " << y << " + " << z << endl;

    x = y - z;
    cout << "\nx = y - z:\n" << x << " = " << y << " - " << z << endl;

    x = y * z;
    cout << "\nx = y * z:\n" << x << " = " << y << " * " << z << endl;

    x = y * 2;
    cout << "\nx = y * 2:\n" << x << " = " << y << " * 2" << endl;

    x = 2 * y;
    cout << "\nx = 2 * y:\n" << x << " = 2 * " << y << endl;

    if (y == z) {
        cout << "\n" << y << " == " << z << endl;
    } else {
        cout << "\n" << y << " != " << z << endl;
    }

    if (y != z) {
        cout << "\n" << y << " != " << z << endl;
    } else {
        cout << "\n" << y << " == " << z << endl;
    }

    Complex tmp = x;

    x += y;
    cout << "\nx += y\n" << x << " = " << tmp << " + " << y << endl;

    tmp = x;
    x -= y;
    cout << "\nx -= y\n" << x << " = " << tmp << " - " << y << endl;

    tmp = x;
    x *= y;
    cout << "\nx *= y\n" << x << " = " << tmp << " * " << y << endl;

    return 0;
}
